
class Ant {

  PImage ant;
  PVector location;
  PVector velocity;
  PVector acceleration;
  float r;
  float maxforce;
  float maxspeed;
  float energy;
  float bsize;
  int amount;

  DNA dna;

  boolean alive;
  boolean consumed;


  Ant(float x, float y, float s, float force, float ie, float dat) {
    acceleration = new PVector(0, 0);
    velocity = new PVector(0, 0);
    location = new PVector(x, y);
    dna = new DNA(s, force, ie, dat);
    bsize = s;
    maxforce = dna.maxF;
    maxspeed = dna.maxSp;
    energy = dna.initialEnergy;
    alive = true;
    consumed = false;
    amount = 150;
    ant = loadImage("ant.png");
  }


  // Update the velocity and location, based on the acceleration generated by the steering force
  void update() {
    velocity.add(acceleration);
    velocity.limit(maxspeed);
    location.add(velocity);
    acceleration.mult(0); // clear the acceleration for the next frame
  }

  // Newton’s second law; we could divide by mass if we wanted.
  // If there are multiple forces (e.g. gravity, wind) we use
  // this function for each one, and it is added to the acceleration
  void applyForce(PVector force) {
    acceleration.add(force);
  }

  /*
      Different steering algorithms
   */
  void applyBehaviors(ArrayList<Ant> ants) {
    // seek() and separate() do not apply the force
    PVector separate = separate(ants);
    PVector seek = seek(new PVector(random(width), random(height)));    //(width/2, height/2)

    separate.mult(100); 
    seek.mult(0.5);

    applyForce(separate);
    applyForce(seek);
  }
  void flock(ArrayList<Ant> boids) {
    // The three flocking rules
    PVector sep = separate(boids);
    PVector ali = align(boids);
    PVector coh = cohesion(boids);

    // Arbitrary weights for these forces
    sep.mult(.3);
    ali.mult(1.0);
    coh.mult(2.0);

    // Applying all the forces
    applyForce(sep);
    applyForce(ali);
    applyForce(coh);
  }

  PVector align (ArrayList<Ant> boids) {

    float neighbordist = 50;
    PVector sum = new PVector(0, 0);
    int count = 0;
    for (Ant other : boids) {
      float d = PVector.dist(location, other.location);
      if ((d > 0) && (d < neighbordist)) {
        sum.add(other.velocity);
        // For an average, we need to keep track of
        // how many boids are within the distance.
        count++;
      }
    }
    if (count > 0) {
      sum.div(count);
      sum.normalize();
      sum.mult(maxspeed);
      PVector steer = PVector.sub(sum, velocity);
      steer.limit(maxforce);
      return steer;
      // If we don’t find any close boids,
      // the steering force is zero.
    } else {
      return new PVector(0, 0);
    }
  }

  PVector cohesion (ArrayList<Ant> boids) {
    float neighbordist = 20;
    PVector sum = new PVector(0, 0);
    int count = 0;
    for (Ant other : boids) {
      float d = PVector.dist(location, other.location);
      if ((d > 0) && (d < neighbordist)) {
        // Adding up all the others’ locations
        sum.add(other.location);
        count++;
      }
    }
    if (count > 0) {
      sum.div(count);
      //The target
      // we seek is the average location of
      // our neighbors.
      return seek(sum);
    } else {
      return new PVector(0, 0);
    }
  }

  PVector seek(PVector target) {
    PVector desired = PVector.sub(target, location);
    desired.normalize();
    desired.mult(maxspeed);
    PVector steer = PVector.sub(desired, velocity);
    steer.limit(maxforce);
    
    return steer;
  }

  // Calculate the steering force to follow a flow field
  void follow(FlowField flow) {
    // Look up the vector at that spot in the flow field
    PVector desired = flow.lookup(location);
    desired.mult(maxspeed);

    // Steering is desired minus velocity
    PVector steer = PVector.sub(desired, velocity);
    steer.limit(maxforce);
    applyForce(steer);
  }

  void display() {
    // Ant points in direction of velocity
    float theta = velocity.heading() + PI/4;

    noStroke();
    pushMatrix();
    translate(location.x, location.y);
    rotate(theta);
    scale(bsize);
    imageMode(CENTER);
    image(ant, 0, 0);
    popMatrix();
  }


  PVector separate (ArrayList<Ant> ants) {
    PVector steer = new PVector(0, 0);
    float desiredseparation = 20; // how close is too close.
    int count = 0;
    PVector sum = new PVector(0, 0);

    for (Ant other : ants) {

      // What is the distance between me and another ant?
      float d = PVector.dist(location, other.location);

      // If the distance is zero we are looking at ourselves; exclude that
      if ((d > 0) && (d < desiredseparation)) {

        // calculate the location of this ant
        PVector diff = PVector.sub(location, other.location); 
        diff.normalize();

        // We'll need the average, so add this location to the sum 
        // of all locations and increment the count.
        sum.add(diff); 
        count++;
      }
    } // end of loop over all ants

    // now calculate the average, 
    // figure out the force
    // and apply the force:
    if (count > 0) { // If zero then no one is too close
      sum.div(count); // sum is now our desired velocity

      // Scale average to maxspeed
      sum.setMag(maxspeed);

      // Apply Reynolds’s steering formula:
      // error is our current velocty minus our desired velocity
      steer = PVector.sub(sum, velocity);
      steer.limit(maxforce);

      // Apply the force to the ant’s
      // acceleration.
      //applyForce(steer);
    }
    return steer;
  }

  DNA getDNA() {
    return(dna.getDNA());
  }

  void feed(PVector food) { //when the ant is near the food source, increase energy
    PVector dist = PVector.sub(food, location);
    if (dist.mag()<40) {
      energy++;
      amount -=1;  //when the vehicles gain energy, the food source depletes
      //println(amount);  //debugging to see if amount would decrease
    }
  }

  void consumeEnergy() {
    if (abs(energy) < dna.deadAt) {  //if energy reaches the threshold, mark it as dead
      alive = false;
    } else {  //if it isn't eating food, deplete its energy
      energy -=1;
    }
  }
//this is not used. 
  void foodConsumed() {
    if (amount <= 10) {
      consumed = true;    //if the food is completely consumed, set it up to make a new one
    }
  }
}
